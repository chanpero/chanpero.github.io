<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode 136 只出现一次的数字</title>
    <link href="/2022/10/16/LeetCode-136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2022/10/16/LeetCode-136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-136-只出现一次的数字"><a href="#LeetCode-136-只出现一次的数字" class="headerlink" title="LeetCode 136 只出现一次的数字"></a>LeetCode 136 只出现一次的数字</h1><p>链接：<a href="https://leetcode.cn/problems/single-number/">https://leetcode.cn/problems/single-number/</a></p><img src="/2022/10/16/LeetCode-136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/LeetCode136.png" class="" title="alt LeetCode136"><p>找出数组中唯一成单的数字，主要学习异或运算的性质和哈希表的使用。</p><h2 id="解法1-异或运算"><a href="#解法1-异或运算" class="headerlink" title="解法1. 异或运算"></a>解法1. 异或运算</h2><p>异或运算的三个性质</p><ul><li>任何数和0做异或，结果仍是原来的数<br>  $ a \bigoplus 0 &#x3D; a $</li><li>任何数和自身做异或结果是0<br>  $ a \bigoplus$ a &#x3D; 0 $</li><li>异或运算满足交换律和结合律<br>  $ a \bigoplus b \bigoplus a &#x3D; b \bigoplus a \bigoplus a &#x3D; b $<br>因此数组中所有元素异或即可得到单个的元素。时间复杂度O(n)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++)&#123;<br>            ans ^= nums[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="解法2-哈希表"><a href="#解法2-哈希表" class="headerlink" title="解法2. 哈希表"></a>解法2. 哈希表</h2><p>使用哈希表存储每个数字和该数字出现的次数。最后次数为1的就是单个数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Class Solution &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(Integer i : nums)&#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> map.get(i);<br>            map.put(i, count == <span class="hljs-literal">null</span> ? <span class="hljs-number">1</span> : ++count;);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Integer i : nums)&#123;<br>            <span class="hljs-keyword">if</span>(map.get(i) == <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> i;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n),空间复杂度O(n)</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows平台搭建Dash系统</title>
    <link href="/2020/12/01/Windows%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BADash%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/12/01/Windows%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BADash%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows平台搭建Dash系统"><a href="#Windows平台搭建Dash系统" class="headerlink" title="Windows平台搭建Dash系统"></a>Windows平台搭建Dash系统</h1><h2 id="1-Dash简介"><a href="#1-Dash简介" class="headerlink" title="1. Dash简介"></a>1. Dash简介</h2><p><strong>Dynamic Adaptation Streaming over HTTP (Dash):</strong><br>HTTP上的动态自适应视频流技术，它将一个视频划分为许多个segment，每个segment有不同质量的副本，能够在播放时根据用户当前的网络状况选择最佳的码率，减少卡顿。详情: <a href="https://dashif.org/">https://dashif.org/</a></p><h2 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2. 配置环境"></a>2. 配置环境</h2><ul><li>环境<ul><li>系统：Windows 10</li><li>客户端：Chrome</li></ul></li><li>工具 (安装好并将<code>bin</code>目录加入系统环境变量)<ul><li>服务器：Nginx <a href="https://www.cnblogs.com/taiyonghai/p/9402734.html">安装教程</a></li><li>编解码器：<a href="https://github.com/BtbN/FFmpeg-Builds/releases">FFmpeg</a></li><li>视频切片工具：<a href="https://www.bento4.com/downloads/">Bento4</a></li><li>播放器：<a href="https://github.com/Dash-Industry-Forum/dash.js">dash.js</a></li></ul></li><li>视频<ul><li>Big Buck Bunny   可以去 <a href="https://download.blender.org/peach/bigbuckbunny_movies/">https://download.blender.org/peach/bigbuckbunny_movies/</a> 下载</li></ul></li></ul><h2 id="3-对视频进行编码"><a href="#3-对视频进行编码" class="headerlink" title="3. 对视频进行编码"></a>3. 对视频进行编码</h2><ul><li>目标编码格式：H.264&#x2F;AVC</li><li>目标分辨率级别：<ul><li>1920×1080 (1080p)</li><li>1280×720 (720p)</li><li>854×480 (480p)</li><li>640×360 (360p)</li><li>256×144 (144p)</li></ul></li><li>编码命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i Big_Buck_Bunny_1080p.avi -s 1920x1080 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_1920x1080.mp4<br>ffmpeg -i Big_Buck_Bunny_1080p.avi -s 1280x720 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_1280x720.mp4<br>ffmpeg -i Big_Buck_Bunny_1080p.avi -s 896x504 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_896x504.mp4<br>ffmpeg -i Big_Buck_Bunny_1080p.avi -s 640x360 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_640x360.mp4<br>ffmpeg -i Big_Buck_Bunny_1080p.avi -s 256x144 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_256x144.mp4<br></code></pre></td></tr></table></figure><ul><li><code>-i</code>：输入文件名</li><li><code>-s</code>：输出的分辨率</li><li><code>-c:v libx264</code>：将视频编码为H.264&#x2F;AVC格式</li><li><code>-keyint_min 48 -g 48 -sc_threshold 0</code>：固定GOP长度为48帧(即2s，具体由帧率决定)。这里如果没有这个参数后面bento4切分时会报错，具体原因见 <a href="https://blog.csdn.net/LvGreat/article/details/103540007">FFmpeg的GOP（I帧）对齐问题</a></li><li><code>-an</code>：不对音频进行编码，dash中音视频分开编码</li><li>最后是输出文件名</li></ul></li></ul><p> 可以写个bat，扔那边慢慢跑，视频小的话几十秒就好了。完成后：<br> <img src="/2020/12/01/Windows%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BADash%E7%B3%BB%E7%BB%9F/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81%E5%AE%8C%E6%88%90.png" class="" title="alt 视频编码完成"><br>​</p><h2 id="4-视频切片"><a href="#4-视频切片" class="headerlink" title="4. 视频切片"></a>4. 视频切片</h2><ol><li><p>使用bento4的<code>mp4fragment</code>对视频进行fragment</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">mp4fragment --fragment-duration 2000 BBB_1920x1080.mp4 fragmented_1080p.mp4<br>mp4fragment --fragment-duration 2000 BBB_1280x720.mp4 fragmented_720p.mp4<br>mp4fragment --fragment-duration 2000 BBB_896x504.mp4 fragmented_480p.mp4<br>mp4fragment --fragment-duration 2000 BBB_640x360.mp4 fragmented_360p.mp4<br>mp4fragment --fragment-duration 2000 BBB_256x144.mp4 fragmented_144p.mp4<br></code></pre></td></tr></table></figure><p>  <code>--fragment-duration</code>：指定fragment时长为2s</p></li><li><p>使用<code>mp4dash</code>对已fragment的视频进行切片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mp4dash fragmented_1080p.mp4 fragmented_720p.mp4 fragmented_480p.mp4 fragmented_360p.mp4 fragmented_144p.mp4<br></code></pre></td></tr></table></figure><p>成后目录中会自动生成out文件夹，里面有mpd文件和切分的segment</p><img src="/2020/12/01/Windows%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BADash%E7%B3%BB%E7%BB%9F/%E8%A7%86%E9%A2%91%E5%88%87%E7%89%87%E5%AE%8C%E6%88%90.png" class="" title="alt 视频切片完成"></li></ol><h2 id="5-编写简易网页播放器"><a href="#5-编写简易网页播放器" class="headerlink" title="5. 编写简易网页播放器"></a>5. 编写简易网页播放器</h2><p>参考：<a href="https://github.com/Dash-Industry-Forum/dash.js%E2%80%8B">https://github.com/Dash-Industry-Forum/dash.js​</a></p><p>将out里面的video文件夹和<code>stream.mpd</code>放到nginx的html文件夹里，下载<code>dash.all.min.js</code>也放入html文件夹中。</p><p>具体的目录结构可以自定义。我这边的目录如下：</p><img src="/2020/12/01/Windows%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BADash%E7%B3%BB%E7%BB%9F/demo%E7%9B%AE%E5%BD%95.png" class="" title="alt Demo目录"><p>DashJS.html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Dash.js Rocks<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-tag">video</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">640px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">360px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;videoPlayer&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dash.all.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> url = <span class="hljs-string">&quot;./stream.mpd&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> player = dashjs.<span class="hljs-title class_">MediaPlayer</span>().<span class="hljs-title function_">create</span>();</span><br><span class="language-javascript">                player.<span class="hljs-title function_">initialize</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#videoPlayer&quot;</span>), url, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">            &#125;)();</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​</p><h2 id="6-配置Nginx服务器"><a href="#6-配置Nginx服务器" class="headerlink" title="6. 配置Nginx服务器"></a>6. 配置Nginx服务器</h2><p>配置访问控制，参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">跨源资源共享（CORS） - HTTP | MDN</a></p><p>修改Nginx的conf下的nginx.conf文件中的server段，主要是加入location &#x2F;file那一块</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json">server <span class="hljs-punctuation">&#123;</span><br>    listen       <span class="hljs-number">8800</span>;<br>    server_name  localhost;<br><br>    location / <span class="hljs-punctuation">&#123;</span><br>        root   html;<br>        index  index.html index.htm;<br>    <span class="hljs-punctuation">&#125;</span><br>    location /file <span class="hljs-punctuation">&#123;</span><br>        if ($request_method = &#x27;OPTIONS&#x27;) <span class="hljs-punctuation">&#123;</span><br>            add_header Access-Control-Allow-Origin $http_origin;<br>            add_header Access-Control-Allow-Methods             <br>            $http_access_control_request_method;<br>            add_header Access-Control-Allow-Credentials <span class="hljs-literal"><span class="hljs-keyword">true</span></span>;<br>            add_header Access-Control-Allow-Headers <br>            $http_access_control_request_method;<br>            add_header Access-Control-Max-Age <span class="hljs-number">1728000</span>;<br>            return <span class="hljs-number">204</span>;<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    #error_page  <span class="hljs-number">404</span>              /<span class="hljs-number">404.</span>html;<br>    error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>    location = /<span class="hljs-number">50</span>x.html <span class="hljs-punctuation">&#123;</span><br>        root   html;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>验证Nginx配置是否正确，正确后启动Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -t<br>start nginx<br></code></pre></td></tr></table></figure><h2 id="7-验证"><a href="#7-验证" class="headerlink" title="7. 验证"></a>7. 验证</h2><p>最后打开 <a href="http://localhost:8800/DashDemo/DashJS.html">http://localhost:8800/DashDemo/DashJS.html</a> 验证是否成功即可</p><p>​</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li>[1] <a href="https://codeleading.com/article/26092631381/#5_Bento4_90">DSAH视频系统（服务器&amp;播放器）搭建 - 代码先锋网</a></li><li>[2] <a href="https://blog.csdn.net/OCTODOG/article/details/79007302">Nginx 搭建DASH服务器_山城过雨的博客-CSDN博客</a></li><li>[3] <a href="https://www.instructables.com/Making-Your-Own-Simple-DASH-MPEG-Server-Windows-10/">Making Your Own Simple MPEG-DASH Server (Windows 10) : 12 Steps - Instructables</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Dash</tag>
      
      <tag>视频流</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
